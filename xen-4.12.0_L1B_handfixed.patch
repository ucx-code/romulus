diff -ruN /root/xen/xen-original/tools/libxc/include/xenguest.h /root/xen/xen-modded/tools/libxc/include/xenguest.h
--- /root/xen/xen-original/tools/libxc/include/xenguest.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxc/include/xenguest.h	2020-06-06 20:20:32.327834558 +0100
@@ -29,6 +29,7 @@
 #define XCFLAGS_HVM       (1 << 2)
 #define XCFLAGS_STDVGA    (1 << 3)
 #define XCFLAGS_CHECKPOINT_COMPRESS    (1 << 4)
+#define XCFLAGS_SAMEHOST (1 << 5)
 
 #define X86_64_B_SIZE   64 
 #define X86_32_B_SIZE   32
diff -ruN /root/xen/xen-original/tools/libxc/xc_sr_common.h /root/xen/xen-modded/tools/libxc/xc_sr_common.h
--- /root/xen/xen-original/tools/libxc/xc_sr_common.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxc/xc_sr_common.h	2020-06-06 20:20:32.327834558 +0100
@@ -195,6 +195,9 @@
             /* Plain VM, or checkpoints over time. */
             int checkpointed;
 
+            /* To be migrated on the same physical host vs to external host */
+            bool same_host;
+
             /* Further debugging information in the stream. */
             bool debug;
 
@@ -329,6 +332,8 @@
                     /* HVM context blob. */
                     void *context;
                     size_t contextsz;
+                    /* EPT info */
+                    uint64_t eptp;
                 } restore;
             };
         } x86_hvm;
diff -ruN /root/xen/xen-original/tools/libxc/xc_sr_restore_x86_hvm.c /root/xen/xen-modded/tools/libxc/xc_sr_restore_x86_hvm.c
--- /root/xen/xen-original/tools/libxc/xc_sr_restore_x86_hvm.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxc/xc_sr_restore_x86_hvm.c	2020-06-06 20:20:32.327834558 +0100
@@ -2,6 +2,24 @@
 #include <arpa/inet.h>
 
 #include "xc_sr_common_x86.h"
+#include "xc_sr_common.h"
+
+/*
+ * Process an EPTINFO record from stream.
+ */
+static int handle_eptinfo(struct xc_sr_context *ctx,
+                          struct xc_sr_record *rec)
+{
+    // All these steps are really uneeded. fix it later TODO
+    void * eptp;
+    eptp = malloc(sizeof(uint64_t));
+    // TODO: !eptp fail
+    memcpy(eptp, rec->data, sizeof(uint64_t));
+    ctx->x86_hvm.restore.eptp = * ((uint64_t *) eptp);
+    free(eptp);
+
+    return 0;
+}
 
 /*
  * Process an HVM_CONTEXT record from the stream.
@@ -136,6 +154,7 @@
 {
     xc_interface *xch = ctx->xch;
 
+
     if ( ctx->restore.guest_type != DHDR_TYPE_X86_HVM )
     {
         ERROR("Unable to restore %s domain into an x86_hvm domain",
@@ -157,6 +176,7 @@
         return -1;
     }
 #endif
+    ctx->x86_hvm.restore.eptp = 0; // Clear the EPTP
 
     return 0;
 }
@@ -178,6 +198,9 @@
     case REC_TYPE_HVM_PARAMS:
         return handle_hvm_params(ctx, rec);
 
+    case REC_TYPE_HVM_EPTP_INFO:
+        return handle_eptinfo(ctx, rec);
+
     default:
         return RECORD_NOT_PROCESSED;
     }
@@ -186,23 +209,34 @@
 /*
  * restore_ops function.  Sets extra hvm parameters and seeds the grant table.
  */
-static int x86_hvm_stream_complete(struct xc_sr_context *ctx)
-{
+static int x86_hvm_stream_complete(struct xc_sr_context *ctx) {
     xc_interface *xch = ctx->xch;
     int rc;
 
+    /* EPT should be set at the beginning */
+    DPRINTF("Setting EPTP %lX", ctx->x86_hvm.restore.eptp);
+
+    if (ctx->x86_hvm.restore.eptp != 0) {
+
+        // Set the eptp
+        rc = xc_hvm_param_set(xch, ctx->domid, HVM_EPT_INFO,
+                              ctx->x86_hvm.restore.eptp);
+        if (rc) {
+            PERROR("Failed to set the EPT info");
+            return rc;
+        }
+    }
+
     rc = xc_hvm_param_set(xch, ctx->domid, HVM_PARAM_STORE_EVTCHN,
                           ctx->restore.xenstore_evtchn);
-    if ( rc )
-    {
+    if (rc) {
         PERROR("Failed to set HVM_PARAM_STORE_EVTCHN");
         return rc;
     }
 
     rc = xc_hvm_param_set(xch, ctx->domid, HVM_PARAM_CONSOLE_EVTCHN,
                           ctx->restore.console_evtchn);
-    if ( rc )
-    {
+    if (rc) {
         PERROR("Failed to set HVM_PARAM_CONSOLE_EVTCHN");
         return rc;
     }
@@ -210,8 +244,7 @@
     rc = xc_domain_hvm_setcontext(xch, ctx->domid,
                                   ctx->x86_hvm.restore.context,
                                   ctx->x86_hvm.restore.contextsz);
-    if ( rc < 0 )
-    {
+    if (rc < 0) {
         PERROR("Unable to restore HVM context");
         return rc;
     }
@@ -221,8 +254,7 @@
                                 ctx->restore.xenstore_gfn,
                                 ctx->restore.console_domid,
                                 ctx->restore.xenstore_domid);
-    if ( rc )
-    {
+    if (rc) {
         PERROR("Failed to seed grant table");
         return rc;
     }
diff -ruN /root/xen/xen-original/tools/libxc/xc_sr_save.c /root/xen/xen-modded/tools/libxc/xc_sr_save.c
--- /root/xen/xen-original/tools/libxc/xc_sr_save.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxc/xc_sr_save.c	2020-06-06 20:20:32.328834542 +0100
@@ -748,7 +748,7 @@
             goto out;
     }
 
-  out:
+    out:
     return rc;
 }
 
@@ -783,6 +783,73 @@
     return rc;
 }
 
+static int send_ept(struct xc_sr_context *ctx)
+{
+    struct xc_sr_record ept_info = { REC_TYPE_HVM_EPTP_INFO, 0, NULL };
+    int rc;
+    xc_interface *xch = ctx->xch;
+    uint64_t value = 0;
+    DPRINTF("Saving EPTP (old) %lX", value);
+
+    rc = xc_hvm_param_get(xch, ctx->domid, HVM_EPT_INFO, &value);
+
+    if ( rc )
+    {
+        PERROR("Failed to get EPT info");
+        return 0;
+    }
+
+    ept_info.data = malloc(sizeof(uint64_t));
+    memcpy(ept_info.data, &value, sizeof(uint64_t));
+    ept_info.length = sizeof(uint64_t);
+    DPRINTF("Saving EPTP (new) %lX", value);
+
+    // TODO. Do we need to free anything here?
+    return write_record(ctx, &ept_info);
+}
+
+/*
+ * Send just the domain's EPT structs, pausing the domain first.  Can be used for quick same-host
+ * suspend-to-file.
+ */
+static int send_domain_ept_nonlive(struct xc_sr_context *ctx)
+{
+    xc_interface *xch = ctx->xch;
+    int rc;
+
+    xc_set_progress_prefix(xch, "EPT info");
+
+    rc = send_ept(ctx);
+    if ( rc )
+        goto err;
+
+    rc = suspend_domain(ctx);
+    if ( rc )
+        goto err;
+
+    err:
+    return rc;
+}
+/*
+static int send_domain_ept_live(struct xc_sr_context *ctx)
+{
+    xc_interface *xch = ctx->xch;
+    int rc;
+
+    xc_set_progress_prefix(xch, "EPT info");
+
+    rc = send_ept(ctx);
+    if ( rc )
+        goto err;
+
+    rc = suspend_domain(ctx);
+    if ( rc )
+        goto err;
+
+    err:
+    return rc;
+}
+*/
 static int setup(struct xc_sr_context *ctx)
 {
     xc_interface *xch = ctx->xch;
@@ -868,8 +935,12 @@
         if ( rc )
             goto err;
 
-        if ( ctx->save.live )
+        if ( ctx->save.live && ctx->save.same_host )
+            rc = send_domain_ept_nonlive(ctx);
+        else if (ctx->save.live )
             rc = send_domain_memory_live(ctx);
+        else if ( ctx->save.same_host )
+            rc = send_domain_ept_nonlive(ctx);
         else if ( ctx->save.checkpointed != XC_MIG_STREAM_NONE )
             rc = send_domain_memory_checkpointed(ctx);
         else
@@ -979,9 +1050,11 @@
     ctx.save.callbacks = callbacks;
     ctx.save.live  = !!(flags & XCFLAGS_LIVE);
     ctx.save.debug = !!(flags & XCFLAGS_DEBUG);
+    ctx.save.same_host = !!(flags & XCFLAGS_SAMEHOST);
     ctx.save.checkpointed = stream_type;
     ctx.save.recv_fd = recv_fd;
 
+    fprintf(stderr, "[xc_sr_save] same host %d\n", ctx.save.same_host);
     /* If altering migration_stream update this assert too. */
     assert(stream_type == XC_MIG_STREAM_NONE ||
            stream_type == XC_MIG_STREAM_REMUS ||
diff -ruN /root/xen/xen-original/tools/libxc/xc_sr_stream_format.h /root/xen/xen-modded/tools/libxc/xc_sr_stream_format.h
--- /root/xen/xen-original/tools/libxc/xc_sr_stream_format.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxc/xc_sr_stream_format.h	2020-06-06 20:20:32.328834542 +0100
@@ -76,6 +76,8 @@
 #define REC_TYPE_VERIFY                     0x0000000dU
 #define REC_TYPE_CHECKPOINT                 0x0000000eU
 #define REC_TYPE_CHECKPOINT_DIRTY_PFN_LIST  0x0000000fU
+#define REC_TYPE_HVM_EPTP_INFO              0x00000010U
+
 
 #define REC_TYPE_OPTIONAL             0x80000000U
 
diff -ruN /root/xen/xen-original/tools/libxl/libxl_domain.c /root/xen/xen-modded/tools/libxl/libxl_domain.c
--- /root/xen/xen-original/tools/libxl/libxl_domain.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxl/libxl_domain.c	2020-06-06 20:20:32.328834542 +0100
@@ -509,8 +509,10 @@
     dss->type = type;
     dss->live = flags & LIBXL_SUSPEND_LIVE;
     dss->debug = flags & LIBXL_SUSPEND_DEBUG;
+    dss->same_host = flags & LIBXL_SUSPEND_SAMEHOST;
     dss->checkpointed_stream = LIBXL_CHECKPOINTED_STREAM_NONE;
 
+    fprintf(stderr, "[libxl] Same host is %d\n", dss->same_host);
     rc = libxl__fd_flags_modify_save(gc, dss->fd,
                                      ~(O_NONBLOCK|O_NDELAY), 0,
                                      &dss->fdfl);
diff -ruN /root/xen/xen-original/tools/libxl/libxl_dom_save.c /root/xen/xen-modded/tools/libxl/libxl_dom_save.c
--- /root/xen/xen-original/tools/libxl/libxl_dom_save.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxl/libxl_dom_save.c	2020-06-06 20:20:32.328834542 +0100
@@ -380,7 +380,8 @@
 
     dss->xcflags = (live ? XCFLAGS_LIVE : 0)
           | (debug ? XCFLAGS_DEBUG : 0)
-          | (dss->hvm ? XCFLAGS_HVM : 0);
+          | (dss->hvm ? XCFLAGS_HVM : 0)
+          | (dss->same_host ? XCFLAGS_SAMEHOST : 0);
 
     /* Disallow saving a guest with vNUMA configured because migration
      * stream does not preserve node information.
diff -ruN /root/xen/xen-original/tools/libxl/libxl.h /root/xen/xen-modded/tools/libxl/libxl.h
--- /root/xen/xen-original/tools/libxl/libxl.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxl/libxl.h	2020-06-06 20:20:32.328834542 +0100
@@ -1491,6 +1491,7 @@
                          LIBXL_EXTERNAL_CALLERS_ONLY;
 #define LIBXL_SUSPEND_DEBUG 1
 #define LIBXL_SUSPEND_LIVE 2
+#define LIBXL_SUSPEND_SAMEHOST 4
 
 /*
  * Only suspend domain, do not save its state to file, do not destroy it.
diff -ruN /root/xen/xen-original/tools/libxl/libxl_internal.h /root/xen/xen-modded/tools/libxl/libxl_internal.h
--- /root/xen/xen-original/tools/libxl/libxl_internal.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/libxl/libxl_internal.h	2020-06-06 20:20:32.329834526 +0100
@@ -3300,6 +3300,7 @@
     libxl_domain_type type;
     int live;
     int debug;
+    int same_host;
     int checkpointed_stream;
     const libxl_domain_remus_info *remus;
     /* private */
diff -ruN /root/xen/xen-original/tools/xcutils/hypercaller.c /root/xen/xen-modded/tools/xcutils/hypercaller.c
--- /root/xen/xen-original/tools/xcutils/hypercaller.c	1970-01-01 01:00:00.000000000 +0100
+++ /root/xen/xen-modded/tools/xcutils/hypercaller.c	2020-06-06 20:20:32.329834526 +0100
@@ -0,0 +1,30 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <xenctrl.h>
+#include <xen/sys/privcmd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <linux/types.h>
+
+int main(int argc, char *argv[])
+{
+	unsigned long addr; int a;
+	if (argc != 3) return -1;
+	sscanf(argv[1], "%lu", &addr);
+	sscanf(argv[2], "%d", &a);
+	int fd, ret;
+    privcmd_hypercall_t mycall = {
+            __HYPERVISOR_checkmem,
+            { addr, 0, 0, a, 0}
+    };
+    fd = open("/proc/xen/privcmd", O_RDWR);
+    if (fd < 0) {
+        printf("Couldnt happen privcmd\n");
+        return -1;
+    }
+    ret = ioctl(fd, IOCTL_PRIVCMD_HYPERCALL, &mycall);
+    printf("%d\n", ret);
+    return 0;
+}
+
+
diff -ruN /root/xen/xen-original/tools/xcutils/Makefile /root/xen/xen-modded/tools/xcutils/Makefile
--- /root/xen/xen-original/tools/xcutils/Makefile	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/xcutils/Makefile	2020-06-06 20:20:32.329834526 +0100
@@ -11,12 +11,13 @@
 XEN_ROOT	= $(CURDIR)/../..
 include $(XEN_ROOT)/tools/Rules.mk
 
-PROGRAMS = readnotes lsevtchn
+PROGRAMS = readnotes lsevtchn hypercaller
 
-CFLAGS += -Werror
+CFLAGS += 
 
 # incorrectly uses libxc internals
 CFLAGS_readnotes.o  := $(CFLAGS_libxenevtchn) $(CFLAGS_libxenctrl) $(CFLAGS_libxenguest) -I$(XEN_ROOT)/tools/libxc $(CFLAGS_libxencall)
+CFLAGS_hypercaller.o  := $(CFLAGS_libxenevtchn) $(CFLAGS_libxenctrl) $(CFLAGS_libxenguest) -I$(XEN_ROOT)/tools/libxc $(CFLAGS_libxencall)
 CFLAGS_lsevtchn.o   := $(CFLAGS_libxenevtchn) $(CFLAGS_libxenctrl)
 
 .PHONY: all
@@ -28,6 +29,9 @@
 readnotes: readnotes.o
 	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(LDLIBS_libxenguest) $(APPEND_LDFLAGS)
 
+hypercaller: hypercaller.o
+	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(LDLIBS_libxenguest) $(APPEND_LDFLAGS)
+
 lsevtchn: lsevtchn.o
 	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
 
diff -ruN /root/xen/xen-original/tools/xl/xl_migrate.c /root/xen/xen-modded/tools/xl/xl_migrate.c
--- /root/xen/xen-original/tools/xl/xl_migrate.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/xl/xl_migrate.c	2020-06-06 20:20:32.329834526 +0100
@@ -176,7 +176,7 @@
 
 }
 
-static void migrate_domain(uint32_t domid, const char *rune, int debug,
+static void migrate_domain(uint32_t domid, const char *rune, int debug, int same_host,
                            const char *override_config_file)
 {
     pid_t child = -1;
@@ -205,6 +205,10 @@
 
     if (debug)
         flags |= LIBXL_SUSPEND_DEBUG;
+    if (same_host) {
+        fprintf(stderr, "IT IS SAME HOST\n");
+        flags |= LIBXL_SUSPEND_SAMEHOST;
+    }
     rc = libxl_domain_suspend(ctx, domid, send_fd, flags, NULL);
     if (rc) {
         fprintf(stderr, "migration sender: libxl_domain_suspend failed"
@@ -284,7 +288,7 @@
     }
 
     fprintf(stderr, "migration sender: Target reports successful startup.\n");
-    libxl_domain_destroy(ctx, domid, 0); /* bang! */
+    //libxl_domain_destroy(ctx, domid, 0); /* bang! */
     fprintf(stderr, "Migration successful.\n");
     exit(EXIT_SUCCESS);
 
@@ -536,14 +540,14 @@
     const char *ssh_command = "ssh";
     char *rune = NULL;
     char *host;
-    int opt, daemonize = 1, monitor = 1, debug = 0, pause_after_migration = 0;
+    int opt, daemonize = 1, monitor = 1, debug = 0, pause_after_migration = 0, same_host = 0;
     static struct option opts[] = {
         {"debug", 0, 0, 0x100},
         {"live", 0, 0, 0x200},
         COMMON_LONG_OPTS
     };
 
-    SWITCH_FOREACH_OPT(opt, "FC:s:ep", opts, "migrate", 2) {
+    SWITCH_FOREACH_OPT(opt, "lFC:s:ep", opts, "migrate", 2) {
     case 'C':
         config_filename = optarg;
         break;
@@ -557,6 +561,9 @@
         daemonize = 0;
         monitor = 0;
         break;
+    case 'l':
+        same_host = 1;
+        break;
     case 'p':
         pause_after_migration = 1;
         break;
@@ -596,7 +603,7 @@
                   pause_after_migration ? " -p" : "");
     }
 
-    migrate_domain(domid, rune, debug, config_filename);
+    migrate_domain(domid, rune, debug, same_host, config_filename);
     return EXIT_SUCCESS;
 }
 
diff -ruN /root/xen/xen-original/tools/xl/xl_saverestore.c /root/xen/xen-modded/tools/xl/xl_saverestore.c
--- /root/xen/xen-original/tools/xl/xl_saverestore.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/tools/xl/xl_saverestore.c	2020-06-06 20:20:32.329834526 +0100
@@ -120,7 +120,7 @@
 }
 
 static int save_domain(uint32_t domid, const char *filename, int checkpoint,
-                            int leavepaused, const char *override_config_file)
+                            int leavepaused, int same_host, const char *override_config_file)
 {
     int fd;
     uint8_t *config_data;
@@ -141,7 +141,7 @@
 
     save_domain_core_writeconfig(fd, filename, config_data, config_len);
 
-    int rc = libxl_domain_suspend(ctx, domid, fd, 0, NULL);
+    int rc = libxl_domain_suspend(ctx, domid, fd, (same_host) ? LIBXL_SUSPEND_SAMEHOST : 0, NULL);
     close(fd);
 
     if (rc < 0) {
@@ -235,15 +235,19 @@
     const char *config_filename = NULL;
     int checkpoint = 0;
     int leavepaused = 0;
+    int same_host = 0;
     int opt;
 
-    SWITCH_FOREACH_OPT(opt, "cp", NULL, "save", 2) {
+    SWITCH_FOREACH_OPT(opt, "cpl", NULL, "save", 2) {
     case 'c':
         checkpoint = 1;
         break;
     case 'p':
         leavepaused = 1;
         break;
+    case 'l':
+        same_host = 1;
+        break;
     }
 
     if (argc-optind > 3) {
@@ -256,7 +260,7 @@
     if ( argc - optind >= 3 )
         config_filename = argv[optind + 2];
 
-    save_domain(domid, filename, checkpoint, leavepaused, config_filename);
+    save_domain(domid, filename, checkpoint, leavepaused, same_host, config_filename);
     return EXIT_SUCCESS;
 }
 
diff -ruN /root/xen/xen-original/xen/arch/x86/guest/hypercall_page.S /root/xen/xen-modded/xen/arch/x86/guest/hypercall_page.S
--- /root/xen/xen-original/xen/arch/x86/guest/hypercall_page.S	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/guest/hypercall_page.S	2020-06-06 20:20:32.329834526 +0100
@@ -61,6 +61,7 @@
 DECLARE_HYPERCALL(tmem_op)
 DECLARE_HYPERCALL(xc_reserved_op)
 DECLARE_HYPERCALL(xenpmu_op)
+DECLARE_HYPERCALL(checkmem)
 
 DECLARE_HYPERCALL(arch_0)
 DECLARE_HYPERCALL(arch_1)
diff -ruN /root/xen/xen-original/xen/arch/x86/hvm/hvm.c /root/xen/xen-modded/xen/arch/x86/hvm/hvm.c
--- /root/xen/xen-original/xen/arch/x86/hvm/hvm.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/hvm/hvm.c	2020-06-06 20:20:32.330834510 +0100
@@ -73,6 +73,7 @@
 #include <public/vm_event.h>
 #include <public/arch-x86/cpuid.h>
 #include <asm/cpuid.h>
+#include <asm/hvm/vmx/vmx.h>
 
 #include <compat/hvm/hvm_op.h>
 
@@ -85,6 +86,19 @@
 
 struct hvm_function_table hvm_funcs __read_mostly;
 
+// Copied from somewhere in Xen
+static inline bool_t is_epte_valid(ept_entry_t *e)
+{
+    /* suppress_ve alone is not considered valid, so mask it off */
+    return ((e->epte & ~(1ul << 63)) != 0 && e->sa_p2mt != p2m_invalid);
+}
+#define is_epte_superpage(ept_entry)    ((ept_entry)->sp)
+#define is_epte_present(ept_entry)	((ept_entry)->epte & 0x7)
+
+#define atomic_read_ept_entry(__pepte)                              \
+    ( (ept_entry_t) { .epte = read_atomic(&(__pepte)->epte) } )
+
+
 /*
  * The I/O permission bitmap is globally shared by all HVM guests except
  * the hardware domain which needs a more permissive one.
@@ -4150,6 +4164,7 @@
     struct domain *d;
     struct vcpu *v;
     int rc;
+    unsigned long eptp;
 
     if ( copy_from_guest(&a, arg, 1) )
         return -EFAULT;
@@ -4184,6 +4199,24 @@
              !(a.value & HVMPV_base_freq) )
             rc = -EINVAL;
         break;
+    case HVM_EPT_INFO:
+            eptp = a.value;
+
+            p2m_get_hostp2m(d)->ept.eptp = eptp;
+            p2m_get_hostp2m(d)->ept.mfn = eptp >> PAGE_SHIFT;
+
+            p2m_get_hostp2m(d)->phys_table.pfn = eptp >> PAGE_SHIFT;
+
+            // Reinitialize the page list from scratch, it comes with 6 pages that should be deleted but oh well
+            INIT_PAGE_LIST_HEAD(&p2m_get_hostp2m(d)->pages);
+            INIT_PAGE_LIST_HEAD(&d->page_list);
+            print_ept_p2m(d, eptp, 3); // Level 3 is the highest level
+
+            p2m_get_hostp2m(d)->max_mapped_pfn =  get_max_mapped_pfn(a.value, 0, 3);
+
+            vmx_domain_update_eptp(d);
+
+            break;
     case HVM_PARAM_IDENT_PT:
         /*
          * Only actually required for VT-x lacking unrestricted_guest
@@ -4447,6 +4480,13 @@
     case HVM_PARAM_X87_FIP_WIDTH:
         a.value = d->arch.x87_fip_width;
         break;
+    case HVM_EPT_INFO:
+        // Return the EPTP
+        a.value = p2m_get_hostp2m(d)->ept.eptp;
+
+        INIT_PAGE_LIST_HEAD(&p2m_get_hostp2m(d)->pages);
+        INIT_PAGE_LIST_HEAD(&d->page_list);
+        break;
    default:
        a.value = d->arch.hvm.params[a.index];
        break;
diff -ruN /root/xen/xen-original/xen/arch/x86/hvm/hypercall.c /root/xen/xen-modded/xen/arch/x86/hvm/hypercall.c
--- /root/xen/xen-original/xen/arch/x86/hvm/hypercall.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/hvm/hypercall.c	2020-06-06 20:20:32.330834510 +0100
@@ -211,35 +211,12 @@
                     eax, rdi, rsi, rdx, r10, r8, r9);
 
 #ifndef NDEBUG
-        /* Deliberately corrupt parameter regs not used by this hypercall. */
-        switch ( hypercall_args_table[eax].native )
-        {
-        case 0: rdi = 0xdeadbeefdeadf00dUL;
-        case 1: rsi = 0xdeadbeefdeadf00dUL;
-        case 2: rdx = 0xdeadbeefdeadf00dUL;
-        case 3: r10 = 0xdeadbeefdeadf00dUL;
-        case 4: r8 = 0xdeadbeefdeadf00dUL;
-        case 5: r9 = 0xdeadbeefdeadf00dUL;
-        }
 #endif
 
         regs->rax = hvm_hypercall_table[eax].native(rdi, rsi, rdx, r10, r8,
                                                     r9);
 
 #ifndef NDEBUG
-        if ( !curr->hcall_preempted )
-        {
-            /* Deliberately corrupt parameter regs used by this hypercall. */
-            switch ( hypercall_args_table[eax].native )
-            {
-            case 6: regs->r9  = 0xdeadbeefdeadf00dUL;
-            case 5: regs->r8  = 0xdeadbeefdeadf00dUL;
-            case 4: regs->r10 = 0xdeadbeefdeadf00dUL;
-            case 3: regs->rdx = 0xdeadbeefdeadf00dUL;
-            case 2: regs->rsi = 0xdeadbeefdeadf00dUL;
-            case 1: regs->rdi = 0xdeadbeefdeadf00dUL;
-            }
-        }
 #endif
     }
     else
diff -ruN /root/xen/xen-original/xen/arch/x86/mm/hap/hap.c /root/xen/xen-modded/xen/arch/x86/mm/hap/hap.c
--- /root/xen/xen-original/xen/arch/x86/mm/hap/hap.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/mm/hap/hap.c	2020-06-06 20:20:32.330834510 +0100
@@ -538,7 +538,8 @@
     /* Free any memory that the p2m teardown released */
     paging_lock(d);
     hap_set_allocation(d, 0, NULL);
-    ASSERT(d->arch.paging.hap.p2m_pages == 0);
+	printk("There was an assertion arch.paging.hap.p2m_pages == 0 but we commented it\n");
+    /*ASSERT(d->arch.paging.hap.p2m_pages == 0); */
     paging_unlock(d);
 }
 
diff -ruN /root/xen/xen-original/xen/arch/x86/mm/p2m-ept.c /root/xen/xen-modded/xen/arch/x86/mm/p2m-ept.c
--- /root/xen/xen-original/xen/arch/x86/mm/p2m-ept.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/mm/p2m-ept.c	2020-06-06 20:20:32.330834510 +0100
@@ -705,13 +705,19 @@
      */
     if ( (fn_mask & ((1UL << order) - 1)) ||
          ((u64)gfn >> ((ept->wl + 1) * EPT_TABLE_ORDER)) ||
-         (order % EPT_TABLE_ORDER) )
-        return -EINVAL;
+         (order % EPT_TABLE_ORDER) ) {
+	printk("failed %lX %lX %d %d\n", (fn_mask & ((1UL << order) - 1)), ((u64)gfn >> ((ept->wl + 1) * EPT_TABLE_ORDER)),
+		(order % EPT_TABLE_ORDER), EPT_TABLE_ORDER);
+       	printk("gfn %lX ept.wl %d\n", gfn, ept->wl);
+	 return -EINVAL;
+    }
 
     /* Carry out any eventually pending earlier changes first. */
     ret = resolve_misconfig(p2m, gfn);
-    if ( ret < 0 )
+    if ( ret < 0 ) {
+	printk("some misconfigs\n");
         return ret;
+	}
 
     ASSERT((target == 2 && hap_has_1gb) ||
            (target == 1 && hap_has_2mb) ||
@@ -726,6 +732,7 @@
         ret = ept_next_level(p2m, 0, &table, &gfn_remainder, i);
         if ( !ret )
         {
+		printk("hadi o zaman\n");
             rc = -ENOENT;
             goto out;
         }
@@ -853,9 +860,10 @@
         entry_written = 1;
 
         if ( p2mt != p2m_invalid &&
-             (gfn + (1UL << order) - 1 > p2m->max_mapped_pfn) )
+             (gfn + (1UL << order) - 1 > p2m->max_mapped_pfn) ) {
             /* Track the highest gfn for which we have ever had a valid mapping */
             p2m->max_mapped_pfn = gfn + (1UL << order) - 1;
+        }
     }
 
 out:
@@ -906,8 +914,10 @@
     if ( entry_written && p2m_is_hostp2m(p2m) )
     {
         ret = p2m_altp2m_propagate_change(d, _gfn(gfn), mfn, order, p2mt, p2ma);
-        if ( !rc )
+        if ( !rc ) {
+		//printk("falhou 2\n");
             rc = ret;
+	}
     }
 
     return rc;
@@ -1411,6 +1421,139 @@
     return i;
 }
 
+
+
+static int add_page_to_domain(struct domain * d, unsigned long mfn)
+{
+    struct page_info *page;
+
+    page =  mfn_to_page(_mfn(mfn));
+
+    if ( page == NULL )
+        return -ENOMEM;
+
+    page_set_owner(page, d);
+    page_list_add(page, &d->page_list);
+    page->count_info = 0x8000000000000001;
+    page->u.inuse.type_info = 0;
+
+    return 0;
+}
+
+/* TODO: Only supports 2Mb superpages, but in some systems there are also 1Gb pages */
+static int add_superpage_to_domain(struct domain * d, unsigned long mfn)
+{
+    int i;
+    int rc = 0;
+
+    for (i = 0; i < 512; i++)
+    {
+        rc += add_page_to_domain(d, mfn + (i));
+    }
+
+    return rc;
+}
+
+static int add_p2m_page_to_domain(struct domain * d, unsigned long mfn)
+{
+
+    struct page_info *page;
+    page =  mfn_to_page(_mfn(mfn));
+
+    if ( page == NULL )
+        return -ENOMEM;
+
+    page_list_add(page, &p2m_get_hostp2m(d)->pages);
+    page->count_info = 0;
+    page->u.inuse.type_info = 0x400000000000001;
+ 
+    return 0;
+}
+
+unsigned long get_max_mapped_pfn(unsigned long mfn, unsigned long max_pfn, int level)
+{
+    ept_entry_t *table;
+    if (level == 3)
+        table = map_domain_page(_mfn(mfn >> PAGE_SHIFT)); // mfn is eptp when level is 3
+    else if (level >= 0)
+        table = map_domain_page(_mfn(mfn));
+    else
+        return 2;
+
+    for (int i = EPT_PAGETABLE_ENTRIES-1; i >= 0  ; i--) {
+        ept_entry_t e = atomic_read_ept_entry(&table[i]);
+
+        //if (is_epte_valid(&e) && is_epte_present(&e) && mfn_valid(mfn_x((unsigned long)  e.mfn))) {
+        if (is_epte_valid(&e) && is_epte_present(&e) ) {
+            if (level == 0) {
+		return  max_pfn | (i << ((9 * level)));
+            } else {
+                if (!is_epte_superpage(&e)) {
+                    return get_max_mapped_pfn(e.mfn, max_pfn | (i << ((9 * level))), level - 1);
+                } else {
+                    printk("[max] we have a superpage problem level %d i %d\n", level, i);
+                }
+            }
+
+        }
+    }
+    unmap_domain_page(table);
+    return max_pfn;
+}
+
+void print_ept_p2m(struct domain * d, unsigned long mfn, int level)
+{
+    ept_entry_t *table;
+
+    if (level == 3) {
+        table = map_domain_page(_mfn(mfn >> PAGE_SHIFT)); // mfn is eptp when level is 3
+
+        // Add it to the domain's p2m pages list
+        if (add_p2m_page_to_domain(d, mfn >> PAGE_SHIFT) != 0)
+            printk("[print_ept_p2m] page add failed for mfn %lX\n", mfn >> PAGE_SHIFT);
+
+    } else if (level >= 0) {
+        table = map_domain_page(_mfn(mfn));
+    } else {
+        return;
+    }
+
+    // We only enter here if level >= 0
+    for (int i = 0; i < EPT_PAGETABLE_ENTRIES; i++)
+    {
+        ept_entry_t e = atomic_read_ept_entry(&table[i]); // do we need atomic read here?
+
+        //if ( is_epte_valid(&e) && is_epte_present(&e) && mfn_valid(mfn_x((unsigned long) e.mfn)))
+        if ( is_epte_valid(&e) && is_epte_present(&e))
+        {
+            if (level == 0) {
+                    if (add_page_to_domain(d, (unsigned long) e.mfn) != 0)
+                        printk("[add page] failed in superpage\n");
+            } else {
+                if (!is_epte_superpage(&e)) {
+
+                    if (level > 0) {
+
+                        // Add it to the domain's p2m pages list
+                        if (add_p2m_page_to_domain(d, (unsigned long) e.mfn) != 0)
+                            printk("[print_ept_p2m] page add failed for mfn %lX\n", (unsigned long) e.mfn);
+
+                        print_ept_p2m(d, e.mfn, level - 1);
+                    }
+
+
+                } else {
+                    if (add_superpage_to_domain(d, (unsigned long) e.mfn) != 0)
+                        printk("[add page] failed in superpage\n");
+                }
+            }
+        } // else, could we handle this also?
+    }
+
+    unmap_domain_page(table);
+
+}
+
 /*
  * Local variables:
  * mode: C
diff -ruN /root/xen/xen-original/xen/arch/x86/pv/hypercall.c /root/xen/xen-modded/xen/arch/x86/pv/hypercall.c
--- /root/xen/xen-original/xen/arch/x86/pv/hypercall.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/arch/x86/pv/hypercall.c	2020-06-06 20:20:32.330834510 +0100
@@ -82,6 +82,7 @@
     COMPAT_CALL(dm_op),
     HYPERCALL(mca),
     HYPERCALL(arch_1),
+	HYPERCALL(checkmem)
 };
 
 #undef do_arch_1
@@ -127,15 +128,6 @@
 
 #ifndef NDEBUG
         /* Deliberately corrupt parameter regs not used by this hypercall. */
-        switch ( hypercall_args_table[eax].native )
-        {
-        case 0: rdi = 0xdeadbeefdeadf00dUL;
-        case 1: rsi = 0xdeadbeefdeadf00dUL;
-        case 2: rdx = 0xdeadbeefdeadf00dUL;
-        case 3: r10 = 0xdeadbeefdeadf00dUL;
-        case 4: r8 = 0xdeadbeefdeadf00dUL;
-        case 5: r9 = 0xdeadbeefdeadf00dUL;
-        }
 #endif
         if ( unlikely(tb_init_done) )
         {
@@ -147,19 +139,6 @@
         regs->rax = pv_hypercall_table[eax].native(rdi, rsi, rdx, r10, r8, r9);
 
 #ifndef NDEBUG
-        if ( !curr->hcall_preempted )
-        {
-            /* Deliberately corrupt parameter regs used by this hypercall. */
-            switch ( hypercall_args_table[eax].native )
-            {
-            case 6: regs->r9  = 0xdeadbeefdeadf00dUL;
-            case 5: regs->r8  = 0xdeadbeefdeadf00dUL;
-            case 4: regs->r10 = 0xdeadbeefdeadf00dUL;
-            case 3: regs->rdx = 0xdeadbeefdeadf00dUL;
-            case 2: regs->rsi = 0xdeadbeefdeadf00dUL;
-            case 1: regs->rdi = 0xdeadbeefdeadf00dUL;
-            }
-        }
 #endif
     }
     else
diff -ruN /root/xen/xen-original/xen/common/domain.c /root/xen/xen-modded/xen/common/domain.c
--- /root/xen/xen-original/xen/common/domain.c	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/common/domain.c	2020-06-06 20:20:32.330834510 +0100
@@ -1,3 +1,4 @@
+
 /******************************************************************************
  * domain.c
  * 
@@ -42,6 +43,7 @@
 #include <xen/trace.h>
 #include <xen/tmem.h>
 #include <asm/setup.h>
+#include <asm/hvm/vmx/vmx.h>
 
 #ifdef CONFIG_X86
 #include <asm/guest.h>
@@ -71,6 +73,41 @@
 integer_param("hardware_dom", hardware_domid);
 #endif
 
+
+
+// Copied from somewhere in Xen
+static inline bool_t is_epte_valid(ept_entry_t *e)
+{
+    /* suppress_ve alone is not considered valid, so mask it off */
+    return ((e->epte & ~(1ul << 63)) != 0 && e->sa_p2mt != p2m_invalid);
+}
+#define is_epte_superpage(ept_entry)    ((ept_entry)->sp)
+#define atomic_read_ept_entry(__pepte)                              \
+    ( (ept_entry_t) { .epte = read_atomic(&(__pepte)->epte) } )
+
+
+static void alloc_mem(unsigned long order)
+{
+	struct page_info * p;
+	unsigned long mfn;
+	// Order 20 is 4Gb
+	p=alloc_domheap_pages(NULL, order, 0);
+	if (p != NULL) {
+		mfn = mfn_x(page_to_mfn(p));
+		printk("Page at %lX\n", mfn);
+	} else { printk("Failed\n"); }
+}
+
+long do_checkmem(unsigned long addr, unsigned long addr2, unsigned int dom1, unsigned int dom2)
+{
+	int d = dom2;
+	printk("op %lX %lX %X %X\n", addr, addr2, dom1, dom2);
+	if (d == 2) { /* Alloc space and get the mfn */
+		alloc_mem(addr);
+	}	
+	return 0;
+}
+
 struct vcpu *idle_vcpu[NR_CPUS] __read_mostly;
 
 vcpu_info_t dummy_vcpu_info;
diff -ruN /root/xen/xen-original/xen/include/asm-x86/hvm/vmx/vmx.h /root/xen/xen-modded/xen/include/asm-x86/hvm/vmx/vmx.h
--- /root/xen/xen-original/xen/include/asm-x86/hvm/vmx/vmx.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/include/asm-x86/hvm/vmx/vmx.h	2020-06-06 20:20:32.330834510 +0100
@@ -683,4 +683,9 @@
     };
 } ldt_or_tr_instr_info_t;
 
+
+void print_ept_p2m(struct domain * d, unsigned long mfn, int level);
+unsigned long get_max_mapped_pfn(unsigned long mfn, unsigned long max_pfn, int level);
+
+
 #endif /* __ASM_X86_HVM_VMX_VMX_H__ */
diff -ruN /root/xen/xen-original/xen/include/asm-x86/hypercall.h /root/xen/xen-modded/xen/include/asm-x86/hypercall.h
--- /root/xen/xen-original/xen/include/asm-x86/hypercall.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/include/asm-x86/hypercall.h	2020-06-06 20:20:32.330834510 +0100
@@ -11,6 +11,8 @@
 #include <public/arch-x86/xen-mca.h> /* for do_mca */
 #include <asm/paging.h>
 
+extern long do_checkmem(unsigned long addr, unsigned long addr2, unsigned int dom1, unsigned int dom2);
+
 typedef unsigned long hypercall_fn_t(
     unsigned long, unsigned long, unsigned long,
     unsigned long, unsigned long, unsigned long);
diff -ruN /root/xen/xen-original/xen/include/public/hvm/params.h /root/xen/xen-modded/xen/include/public/hvm/params.h
--- /root/xen/xen-original/xen/include/public/hvm/params.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/include/public/hvm/params.h	2020-06-06 20:20:32.330834510 +0100
@@ -279,6 +279,8 @@
 #define XEN_HVM_MCA_CAP_LMCE   (xen_mk_ullong(1) << 0)
 #define XEN_HVM_MCA_CAP_MASK   XEN_HVM_MCA_CAP_LMCE
 
-#define HVM_NR_PARAMS 39
+/* Get and set the EPT info (namely the EPTP) of the HVM machine */
+#define HVM_EPT_INFO 39
+#define HVM_NR_PARAMS 40
 
 #endif /* __XEN_PUBLIC_HVM_PARAMS_H__ */
diff -ruN /root/xen/xen-original/xen/include/public/xen.h /root/xen/xen-modded/xen/include/public/xen.h
--- /root/xen/xen-original/xen/include/public/xen.h	2018-11-29 14:04:11.000000000 +0000
+++ /root/xen/xen-modded/xen/include/public/xen.h	2020-06-06 20:20:32.330834510 +0100
@@ -121,6 +121,7 @@
 #define __HYPERVISOR_xc_reserved_op       39 /* reserved for XenClient */
 #define __HYPERVISOR_xenpmu_op            40
 #define __HYPERVISOR_dm_op                41
+#define __HYPERVISOR_checkmem 42
 
 /* Architecture-specific hypercall definitions. */
 #define __HYPERVISOR_arch_0               48
